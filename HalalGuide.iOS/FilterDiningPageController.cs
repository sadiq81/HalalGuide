// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using HalalGuide.Domain.Enum;
using System.Drawing;
using System.Globalization;
using System.Collections.Generic;

namespace HalalGuide.iOS
{
	public partial class FilterDiningPageController : UIViewController
	{
		public FilterDiningPageController (IntPtr handle) : base (handle)
		{


		}

		partial void SliderValueChanged (MonoTouch.UIKit.UISlider sender)
		{
			sender.Value = (float)Math.Round (sender.Value, MidpointRounding.AwayFromZero);
			SliderValueLabel.Text = sender.Value + " km";
		}

		[Export ("positionForBar:")]
		public  UIBarPosition GetPositionForBar (IUIBarPositioning barPositioning)
		{
			return UIBarPosition.TopAttached;
		}

		public  override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			CategoryTableView.Source = new CategoriesTableSource (CategoryTableView);

			CategoryTableView.TableFooterView = new UIView ();

		}


	}

	public class CategoriesTableSource : UITableViewSource
	{
		private static string cellIdentifier = "CategoryTableCell";
		private bool isExpanded;
		List<DiningCategory> Categories = new List<DiningCategory> ();

		private UITableViewController TableViewController = new UITableViewController ();

		public CategoriesTableSource (UITableView categories)
		{
			TableViewController.TableView = categories;
		}

		public override int RowsInSection (UITableView tableview, int section)
		{
			return Categories.Count + 1;
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			UITableViewCell cell = tableView.DequeueReusableCell (cellIdentifier);

			// if there are no cells to reuse, create a new one
			if (cell == null || indexPath.Row == 0) {
				cell = new UITableViewCell (UITableViewCellStyle.Default, cellIdentifier);
			}

			if (indexPath.Row == 0) {
				cell.TextLabel.Text = "Kategori";
			} else {
				cell.TextLabel.Text = Enum.GetValues (typeof(DiningCategory)).GetValue (indexPath.Row - 1).ToString ();
			}

			return cell;
		}

		public override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{

			if (indexPath.Row == 0) {
				tableView.DeselectRow (indexPath, true); // normal iOS behaviour is to remove the blue highlight

				if (isExpanded) {

					int count = Categories.Count - 1;

					for (int i = 0; i <= count; i++) {
						tableView.BeginUpdates ();
						// insert the 'ADD NEW' row at the end of table display
						tableView.DeleteRows (new NSIndexPath[] { NSIndexPath.FromRowSection (tableView.NumberOfRowsInSection (0) - 1, 0) }, UITableViewRowAnimation.Fade);
						// create a new item and add it to our underlying data (it is not intended to be permanent)
						Categories.RemoveAt (count - i);
						tableView.EndUpdates (); // applies the changes
					}

				} else {

					foreach (DiningCategory category in Enum.GetValues (typeof(DiningCategory))) {
						tableView.BeginUpdates ();
						// insert the 'ADD NEW' row at the end of table display
						tableView.InsertRows (new NSIndexPath[] { NSIndexPath.FromRowSection (tableView.NumberOfRowsInSection (0), 0) }, UITableViewRowAnimation.Fade);
						// create a new item and add it to our underlying data (it is not intended to be permanent)
						Categories.Add (category);
						tableView.EndUpdates (); // applies the changes
					}
				}

				isExpanded = !isExpanded;

			} 
		}
	}
}


