// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using HalalGuide.Util;
using Xamarin.Media;
using HalalGuide.iOS;
using SimpleDBPersistence.Service;
using HalalGuide.ViewModels;

namespace HalalGuide.iOS
{
	public partial class AddNewDiningController : KeyboardSupportedUIViewController
	{
		private readonly AddDiningViewModel ViewModel = ServiceContainer.Resolve<AddDiningViewModel> ();

		public AddNewDiningController (IntPtr handle) : base (handle)
		{

		}

		public async override void ViewDidLoad ()
		{
			base.ViewDidLoad ();
			await ViewModel.LoadAddressNearPosition ();
			Road.AutoCompleteValues = ViewModel.StreetNames ();

			Road.EditingDidEnd += async (sender, e) => {
				RoadNumber.AutoCompleteValues = ViewModel.StreetNumbers (Road.Text);
				PostalCode.Text = ViewModel.PostalCode (Road.Text) ?? PostalCode.Text;
				City.Text = await ViewModel.GetCityNameFromPostalCode (PostalCode.Text) ?? City.Text;
			};
		}

		partial void Regreet (NSObject sender)
		{
			DismissViewController (true, null);
		}

		async partial void Save (NSObject sender)
		{

			if (String.IsNullOrEmpty (Name.Text)) {
				ShowInputError ("Fejl", "Navn skal udfyldes");
				return;
			}

			if (String.IsNullOrEmpty (Road.Text)) {
				ShowInputError ("Fejl", "Vej skal udfyldes");
				return;
			}

			if (String.IsNullOrEmpty (RoadNumber.Text)) {
				ShowInputError ("Fejl", "Vejnummer skal udfyldes");
				return;
			}

			if (String.IsNullOrEmpty (PostalCode.Text)) {
				ShowInputError ("Fejl", "Postnummer skal udfyldes");
				return;
			}

			DismissViewController (true, null);

		}

		private void ShowInputError (string title, string text)
		{
			UIAlertView error = new UIAlertView (title, text, null, "Ok");
			error.Show ();
		}

		[Export ("positionForBar:")]
		public  UIBarPosition GetPositionForBar (IUIBarPositioning barPositioning)
		{
			return UIBarPosition.TopAttached;
		}

		async partial void EnteredPostalCode (UITextField sender)
		{
			string cityName = await ViewModel.GetCityNameFromPostalCode (sender.Text);
			City.Text = cityName ?? City.Text;
		}

		partial void AlcoholValueChanged (UISwitch sender)
		{
			AlcoholImage.Image = UIImage.FromBundle (Constants.DiningAttributeAlcohol + sender.On);
		}

		partial void HalalValueChanged (UISwitch sender)
		{
			HalalImage.Image = UIImage.FromBundle (Constants.DiningAttributeHalal + sender.On);
		}

		partial void PorkValueChanged (UISwitch sender)
		{
			PorkImage.Image = UIImage.FromBundle (Constants.DiningAttributePig + sender.On);
		}

		partial  void  PickImage (UIButton sender)
		{
			if (ViewModel.IsCameraAvailable ()) {

				UIActionSheet actionSheet = new UIActionSheet ("Tilføj billede", null, "Fortryd", null, "Tag med kamera", "Vælg fra kamerarulle");
				actionSheet.Clicked += async delegate(object a, UIButtonEventArgs b) {
					switch (b.ButtonIndex) {
					case 0:
						{
							MediaFile file = await ViewModel.TakePicture ("../Library/Caches", "test.jpg");
							if (file != null)
								InvokeOnMainThread (() => {
									DiningImage.Image = UIImage.LoadFromData (NSData.FromFile (file.Path));
									PickImageButton.SetTitle (null, UIControlState.Normal);
								});
							break;
						}
					case 1:
						{
							MediaFile file = await ViewModel.GetPictureFromDevice ();
							if (file != null)
								InvokeOnMainThread (() => {
									DiningImage.Image = UIImage.LoadFromData (NSData.FromFile (file.Path));
									PickImageButton.SetTitle (null, UIControlState.Normal);
								});
							break;
						}
					case 2:
						{
							break;
						}

					}
				};
				actionSheet.ShowInView (View);

			} else {
				UIAlertView noCameraFound = new UIAlertView ("Fejl", "Intet kamera tilgængeligt", null, "Luk");
				noCameraFound.Show ();
			}
		}
	}
}
