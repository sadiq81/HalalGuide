// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using MonoTouch.AudioToolbox;
using HalalGuide.Util;
using Xamarin.Media;
using System.Threading.Tasks;
using System.Deployment.Internal;
using Newtonsoft.Json.Serialization;
using HalalGuide.Services;
using HalalGuide.iOS;
using SimpleDBPersistence.Service;
using HalalGuide.ViewModels;

namespace HalalGuide.iOS
{
	public partial class AddNewDiningController : KeyboardSupportedUIViewController
	{
		private readonly AddDiningViewModel ViewModel = ServiceContainer.Resolve<AddDiningViewModel> ();

		public AddNewDiningController (IntPtr handle) : base (handle)
		{

		}

		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

		}

		partial void Regreet (NSObject sender)
		{
			DismissViewController (true, null);
		}

		async partial void Save (NSObject sender)
		{
			var address = await ViewModel.GetAddressOfCoordinate ();

			if (address != null) {
				UIAlertView error = new UIAlertView ("Addresse", address.ToString (), null, "Ok");
				error.Show ();
			}


			/*
			if (String.IsNullOrEmpty (Name.Text)) {
				ShowInputError ("Fejl", "Navn skal udfyldes");
				return;
			}

			if (String.IsNullOrEmpty (Road.Text)) {
				ShowInputError ("Fejl", "Vej skal udfyldes");
				return;
			}

			if (String.IsNullOrEmpty (PostalCode.Text)) {
				ShowInputError ("Fejl", "Postnummer skal udfyldes");
				return;
			}

			DismissViewController (true, null);
			*/
		}

		private void ShowInputError (string title, string text)
		{
			UIAlertView error = new UIAlertView (title, text, null, "Ok");
			error.Show ();
		}

		[Export ("positionForBar:")]
		public  UIBarPosition GetPositionForBar (IUIBarPositioning barPositioning)
		{
			return UIBarPosition.TopAttached;
		}

		async partial void EnteredPostalCode (UITextField sender)
		{
			string cityName = await ViewModel.GetCityNameFromPostalCode (sender.Text);
			City.Text = cityName ?? City.Text;


		}

		partial void AlcoholValueChanged (UISwitch sender)
		{
			AlcoholImage.Image = UIImage.FromBundle (Constants.DiningAttributeAlcohol + sender.On);
		}

		partial void HalalValueChanged (UISwitch sender)
		{
			HalalImage.Image = UIImage.FromBundle (Constants.DiningAttributeHalal + sender.On);
		}

		partial void PorkValueChanged (UISwitch sender)
		{
			PorkImage.Image = UIImage.FromBundle (Constants.DiningAttributePig + sender.On);
		}

		async partial  void  PickImage (UIButton sender)
		{

			var picker = new MediaPicker ();
			picker.PickPhotoAsync ().ContinueWith (t => {
				if (t.IsCanceled || t.IsFaulted) {
					return;
				}
				UIImage image = UIImage.LoadFromData (NSData.FromFile (t.Result.Path));

				InvokeOnMainThread (() => {
					DiningImage.Image = image;
					PickImageButton.SetTitle (null, UIControlState.Normal);
				});
			});
		}
	}
}
