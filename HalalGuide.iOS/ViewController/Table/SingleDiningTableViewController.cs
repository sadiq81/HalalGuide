// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using HalalGuide.Util;
using HalalGuide.Domain.Enums;
using System.Globalization;
using HalalGuide.Domain;
using HalalGuide.ViewModels;
using HalalGuide.iOS.Tables.Cells;
using HalalGuide.iOS.Util;
using Alliance.Carousel;
using HalalGuide.iOS.Carousel;
using HalalGuide.Services;

namespace HalalGuide.iOS.ViewController.Table
{
	public partial class SingleDiningTableViewController : UITableViewController
	{
		private readonly SingleDiningViewModel viewModel = ServiceContainer.Resolve<SingleDiningViewModel> ();
		private readonly AddReviewViewModel AddReviewViewModel = ServiceContainer.Resolve<AddReviewViewModel> ();
		private UIImageView Expand;
		private CarouselView carousel;

		public SingleDiningTableViewController (IntPtr handle) : base (handle)
		{
		}

		public override void  ViewDidLoad ()
		{
			viewModel.RefreshCache ();

			SetupTableView ();
			SetupUIValues ();
			SetupCollectionView ();
			SetupEventListeners ();
		
		}

		private void SetupTableView ()
		{
			RefreshControl = new UIRefreshControl ();
			RefreshControl.ValueChanged += async (sender, e) => {
				RefreshControl.BeginRefreshing ();
				await viewModel.RefreshLocationPictures ();
				RefreshControl.EndRefreshing ();

			};
			TableView.TableFooterView = new UIView ();
		}

		private void SetupCollectionView ()
		{
			carousel = new CarouselView (PictureContentView.Bounds);
			carousel.DataSource = new SingleDiningImageDataSource ();
			carousel.Delegate = new SingleDiningImageDelegate ();
			carousel.CarouselType = CarouselType.CoverFlow2;
			carousel.ConfigureView ();

			PictureContentView.AddSubview (carousel);
		}

		private void SetupUIValues ()
		{
			Name.Text = viewModel.selectedLocation.name;
			Address.Text = string.Format ("{0} {1}", viewModel.selectedLocation.addressRoad, viewModel.selectedLocation.addressRoadNumber);
			City.Text = string.Format ("{0} {1}", viewModel.selectedLocation.addressPostalCode, viewModel.selectedLocation.addressCity);

			Category.Text = viewModel.selectedLocation.categories.LocalisedCategoriesToString ();

			PorkImage.Image = UIImage.FromBundle (Images.Pig + viewModel.selectedLocation.pork);
			PorkLabel.TextColor = viewModel.selectedLocation.pork ? UIColor.Red : UIColor.Green;
			AlcoholImage.Image = UIImage.FromBundle (Images.Alcohol + viewModel.selectedLocation.alcohol);
			AlcoholLabel.TextColor = viewModel.selectedLocation.alcohol ? UIColor.Red : UIColor.Green;
			HalalImage.Image = UIImage.FromBundle (Images.NonHalal + viewModel.selectedLocation.nonHalal);
			HalalLabel.TextColor = viewModel.selectedLocation.nonHalal ? UIColor.Red : UIColor.Green;

			Km.Text = viewModel.selectedLocation.distance.ToString (Constants.NumberFormat, CultureInfo.CurrentCulture);

			double rating = viewModel.AverageReviewScore ();
			Star1.Image = rating >= 1 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
			Star2.Image = rating >= 2 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
			Star3.Image = rating >= 3 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
			Star4.Image = rating >= 4 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
			Star5.Image = rating >= 5 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
		}

		private void SetupEventListeners ()
		{
			viewModel.refreshedSelectedLocationPictures += ( sender, e) => InvokeOnMainThread (delegate {
				carousel.ReloadData ();
			});

			viewModel.refreshedLocationPictures += (sender, e) => InvokeOnMainThread (delegate {
				carousel.ReloadData ();
			});

			viewModel.refreshedReviews += (sender, e) => InvokeOnMainThread (delegate {
				TableView.ReloadSections (new NSIndexSet (4), UITableViewRowAnimation.Fade);
			});

			viewModel.locationChangedEvent += (sender, e) => {
				Km.Text = viewModel.selectedLocation.distance.ToString (Constants.NumberFormat, CultureInfo.CurrentCulture);
			};

			Report.TouchUpInside += (sender, e) => {
				PresentViewController (viewModel.reportIncorrectInformation (), true, null);
			};

			addPicture.TouchUpInside += (sender, e) => {
			
				UIActionSheet actionSheet = new UIActionSheet (Localization.GetLocalizedValue (Feedback.AddPicture), null, Localization.GetLocalizedValue (Feedback.Regreet), null, Localization.GetLocalizedValue (Feedback.UseCamera), Localization.GetLocalizedValue (Feedback.UseCameraRoll));
				actionSheet.Clicked += async delegate(object a, UIButtonEventArgs b) {
					switch (b.ButtonIndex) {
					case 0:
						await viewModel.TakePicture (viewModel.selectedLocation);
						break;
					case 1:
						await viewModel.GetPictureFromDevice (viewModel.selectedLocation);
						break;
					case 2:
						break;
					}
				};
				actionSheet.ShowInView (this.View);
			};
		}

		public override void PrepareForSegue (UIStoryboardSegue segue, NSObject sender)
		{
			base.PrepareForSegue (segue, sender);
			if (Segue.AddReviewViewControllerSegue.Equals (segue.Identifier)) {
				AddReviewViewModel.selectedLocation = viewModel.selectedLocation;
			}
		}

		#region TableView

		public override int RowsInSection (UITableView tableview, int section)
		{
			if (section == 4) {
				return 0;//ViewModel.reviews.Count;
			} else {
				return	base.RowsInSection (tableview, section);
			}
		}

		public override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{

			if (indexPath.Section != 4) {
				UITableViewCell cell = base.GetCell (tableView, indexPath);
				return cell.AddSeperatorToCell ();
			} else {
				var cell = tableView.DequeueReusableCell (ReviewCell.Identifier);
				if (cell == null) {
					cell = new ReviewCell (UITableViewCellStyle.Default, ReviewCell.Identifier);
				}
				Review r = viewModel.reviews [indexPath.Row];
		
				((ReviewCell)cell).Configure (r);
		
				return cell.AddSeperatorToCell ();
			}
		}

		public  override void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			tableView.DeselectRow (indexPath, true); // normal iOS behaviour is to remove the blue highlight
		}

		public override float GetHeightForRow (MonoTouch.UIKit.UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section != 4) {
				return base.GetHeightForRow (tableView, indexPath);
			} else {
				return 88;
			}
		}

		#endregion

	}
}
