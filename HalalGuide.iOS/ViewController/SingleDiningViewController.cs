// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using HalalGuide.ViewModels;
using SimpleDBPersistence.Service;
using HalalGuide.Util;
using System.Globalization;
using HalalGuide.iOS.CollectionView;
using System.Threading.Tasks;
using HalalGuide.Domain;

namespace HalalGuide.iOS.ViewController
{
	public partial class SingleDiningViewController : UITableViewController
	{
		NSString cellId = new NSString ("PictureCell");
		private const string ReviewCell = "ReviewCell";

		private const int Star1ImageTag = 101;
		private const int Star2ImageTag = 102;
		private const int Star3ImageTag = 103;
		private const int Star4ImageTag = 104;
		private const int Star5ImageTag = 105;

		private const int NameLabelTag = 201;
		private const int ReviewLabelTag = 202;

		public SingleDiningViewModel ViewModel = ServiceContainer.Resolve<SingleDiningViewModel> ();

		public SingleDiningViewController (IntPtr handle) : base (handle)
		{
		}

		public override void  ViewDidLoad ()
		{
			SetupInfoView ();
			SetupCollectionView ();

			ViewModel.LoadedListEvent += (sender, e) => PictureCollectionView.ReloadData ();

			ViewModel.LoadedReviewListEvent += (sender, e) => {

				double rating = ViewModel.AverageReviewScore ();
				Star1Image.Image = rating >= 1 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				Star2Image.Image = rating >= 2 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				Star3Image.Image = rating >= 3 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				Star4Image.Image = rating >= 4 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				Star5Image.Image = rating >= 5 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);

				TableView.ReloadSections (new NSIndexSet (2), UITableViewRowAnimation.Fade);
			};

			ViewModel.LocationChangedEvent += (sender, e) => DistanceLabel.Text = BaseViewModel.SelectedLocation.Distance.ToString (Constants.NumberFormat, CultureInfo.CurrentCulture);

			ViewModel.Update ();
		}

		private void SetupInfoView ()
		{
			NameLabel.Text = BaseViewModel.SelectedLocation.Name;
			RoadLabel.Text = string.Format ("{0} {1}", BaseViewModel.SelectedLocation.AddressRoad, BaseViewModel.SelectedLocation.AddressRoadNumber);
			CityLabel.Text = string.Format ("{0} {1}", BaseViewModel.SelectedLocation.AddressPostalCode, BaseViewModel.SelectedLocation.AddressCity);
			CategoryLabel.Text = BaseViewModel.SelectedLocation.GetCategoriesAsString ();

			PorkImage.Image = UIImage.FromBundle (Images.Pig + BaseViewModel.SelectedLocation.Pork);
			PorkLabel.TextColor = BaseViewModel.SelectedLocation.Pork ? UIColor.Red : UIColor.Green;
			AlcoholImage.Image = UIImage.FromBundle (Images.Alcohol + BaseViewModel.SelectedLocation.Alcohol);
			AlcoholLabel.TextColor = BaseViewModel.SelectedLocation.Alcohol ? UIColor.Red : UIColor.Green;
			HalalImage.Image = UIImage.FromBundle (Images.NonHalal + BaseViewModel.SelectedLocation.NonHalal);
			HalalLabel.TextColor = BaseViewModel.SelectedLocation.NonHalal ? UIColor.Red : UIColor.Green;

			DistanceLabel.Text = BaseViewModel.SelectedLocation.Distance.ToString (Constants.NumberFormat, CultureInfo.CurrentCulture);

		}

		private void SetupCollectionView ()
		{

			PictureCollectionView.RegisterClassForCell (typeof(ImageCell), cellId);
			PictureCollectionView.BackgroundColor = UIColor.White;
			PictureCollectionView.CollectionViewLayout = new LineLayout ();
			AutomaticallyAdjustsScrollViewInsets = false;

		}

		[Export ("collectionView:cellForItemAtIndexPath:")]
		public  UICollectionViewCell GetCell (UICollectionView collectionView, NSIndexPath indexPath)
		{
			var cell = (ImageCell)collectionView.DequeueReusableCell (cellId, indexPath);

			Task.Factory.StartNew (() => 
				ViewModel.GetLocationPictureAtRow (indexPath.Item).
				ContinueWith (t => {
				if (t.Result != null) {
					InvokeOnMainThread (delegate {
						cell.Image = UIImage.LoadFromData (NSData.FromStream (t.Result));
					});
				}
			}));
			return cell;
		}

		[Export ("collectionView:numberOfItemsInSection:")]
		public  int GetItemsCount (UICollectionView collectionView, int section)
		{
			return ViewModel.Rows ();
		}

		[Export ("numberOfSectionsInCollectionView:")]
		public virtual int NumberOfSections (UICollectionView collectionView)
		{
			return 1;
		}

		[Export ("collectionView:shouldHighlightItemAtIndexPath:")]
		public virtual bool ShouldHighlightItem (UICollectionView collectionView, NSIndexPath indexPath)
		{
			return false;
		}

		public override int RowsInSection (UITableView tableview, int section)
		{
			if (section == 0 || section == 1) {
				return base.RowsInSection (tableview, section);
			} else {
				return ViewModel.NumberOfReviews ();
			}
		}

		public  override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section == 0 || indexPath.Section == 1) {
				return base.GetCell (tableView, indexPath);
			} else {

				Review r = ViewModel.GetReviewAtRow (indexPath.Item);

				ReviewCell cell = (ReviewCell)tableView.DequeueReusableCell (ReviewCell);
				if (cell == null) {
					cell = new ReviewCell (UITableViewCellStyle.Default, ReviewCell);
				}

				cell.Submitter.Text = r.Submitter;

				cell.Star1Image.Image = r.Rating >= 1 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				cell.Star2Image.Image = r.Rating >= 2 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				cell.Star3Image.Image = r.Rating >= 3 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				cell.Star4Image.Image = r.Rating >= 4 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);
				cell.Star5Image.Image = r.Rating >= 5 ? UIImage.FromBundle (Images.StarSelected) : UIImage.FromBundle (Images.Star);

				Task.Factory.StartNew (() => 
					ViewModel.GetReviewTextAtRow (indexPath.Item).
					ContinueWith (t => {
					if (t.Result != null) {
						InvokeOnMainThread (delegate {
							cell.Review.Text = t.Result;
						});
					}
				}));

				return cell;
			}
		}

		public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section == 0 || indexPath.Section == 1) {
				return base.GetHeightForRow (tableView, indexPath);
			} else {
				return 88;
			}
		}

		public override  void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			tableView.DeselectRow (indexPath, true); // normal iOS behaviour is to remove the blue highlight
		}
	}
}
