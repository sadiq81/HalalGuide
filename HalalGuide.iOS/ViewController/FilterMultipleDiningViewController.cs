// This file has been autogenerated from a class added in the UI designer.

using System;
using MonoTouch.Foundation;
using MonoTouch.UIKit;
using HalalGuide.ViewModels;
using XUbertestersSDK;
using SimpleDBPersistence.Service;
using System.Collections.Generic;
using HalalGuide.Domain.Enum;
using HalalGuide.Util;
using HalalGuide.iOS.ViewController;

namespace HalalGuide.iOS
{
	public partial class FilterMultipleDiningViewController : KeyboardSupportedTableViewController
	{
		private MultipleDiningViewModel MultipleDiningViewModel = ServiceContainer.Resolve<MultipleDiningViewModel> ();

		private bool isExpanded { get; set; }

		private readonly string CategoryCellIdentifier = "CategoryCell";

		public List<DiningCategory> VisibleCategories { get; set; }

		public List<DiningCategory> CategoriesChoosen { get; set; }

		public FilterMultipleDiningViewController (IntPtr handle) : base (handle)
		{

		}

		public  override void ViewDidLoad ()
		{
			VisibleCategories = new List<DiningCategory> ();
			CategoriesChoosen = MultipleDiningViewModel.CategoryFilter;

			XUbertesters.LogInfo ("FilterDiningPageController: ViewDidLoad-Start");
			base.ViewDidLoad ();

			SetupUIValues ();

			XUbertesters.LogInfo ("FilterDiningPageController: ViewDidLoad-End");
		}

		#region Setup

		private void SetupUIValues ()
		{

			DistanceSlider.Value = (float)MultipleDiningViewModel.DistanceFilter;
			DistanceLabel.Text = MultipleDiningViewModel.DistanceFilter.ToString ();

			PorkSwitch.On = MultipleDiningViewModel.PorkFilter;
			AlcoholSwitch.On = MultipleDiningViewModel.AlcoholFilter;
			HalalSwitch.On = MultipleDiningViewModel.HalalFilter;

			CountLabel.Text = CategoriesChoosen.Count.ToString ();

		}

		#endregion

		#region Actions

		partial void DistanceSliderValueChanged (UISlider sender)
		{
			XUbertesters.LogInfo ("FilterDiningPageController: SliderValueChanged-Start");
			sender.Value = (float)Math.Round (sender.Value, MidpointRounding.AwayFromZero);
			DistanceLabel.Text = sender.Value + " km";
			XUbertesters.LogInfo ("FilterDiningPageController: SliderValueChanged-End");
		}

		partial void Done (NSObject sender)
		{
			MultipleDiningViewModel.DistanceFilter = DistanceSlider.Value;

			MultipleDiningViewModel.PorkFilter = PorkSwitch.On;
			MultipleDiningViewModel.AlcoholFilter = AlcoholSwitch.On;
			MultipleDiningViewModel.HalalFilter = HalalSwitch.On;

			MultipleDiningViewModel.CategoryFilter = CategoriesChoosen;

			MultipleDiningViewModel.RefreshCache ();

			PerformSegue (Segue.UnwindToMultipleDiningViewController, this);

		}

		partial void Choose (NSObject sender)
		{

			((UIButton)sender).SetTitle (isExpanded ? "VÃ¦lg" : "Luk", UIControlState.Normal);

			if (isExpanded) {

				TableView.BeginUpdates ();
				for (int i = 0; i < DiningCategory.Categories.Count; i++) {
					VisibleCategories.RemoveAt (0);
					TableView.DeleteRows (new []{ NSIndexPath.FromRowSection (i, 2) }, UITableViewRowAnimation.Fade);
				}
				TableView.EndUpdates ();

			} else {
				TableView.BeginUpdates ();
				for (int i = 0; i < DiningCategory.Categories.Count; i++) {
					VisibleCategories.Add (DiningCategory.Categories [i]);
					TableView.InsertRows (new []{ NSIndexPath.FromRowSection (i, 2) }, UITableViewRowAnimation.Fade);
				}
				TableView.EndUpdates ();

			}

			isExpanded = !isExpanded;

		}

		partial void Reset (NSObject sender)
		{
			CountLabel.Text = "0";
			CategoriesChoosen.Clear ();
			TableView.ReloadSections (new NSIndexSet (2), UITableViewRowAnimation.Fade);
		}

		#endregion

		public override int RowsInSection (UITableView tableview, int section)
		{
			if (section == 0 || section == 1) {
				return base.RowsInSection (tableview, section);
			} else if (section == 2) {
				return VisibleCategories.Count;
			} else {
				return base.RowsInSection (tableview, section);
			}
		}

		public  override UITableViewCell GetCell (UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section == 0 || indexPath.Section == 1) {
				return base.GetCell (tableView, indexPath);
			} else if (indexPath.Section == 2) {

				CategoryCell cell = (CategoryCell)tableView.DequeueReusableCell (CategoryCellIdentifier);

				if (cell == null) {
					cell = new CategoryCell (UITableViewCellStyle.Default, CategoryCellIdentifier);
				}

				cell.TextLabel.Text = "\t" + DiningCategory.Categories [indexPath.Row].Title;

				bool selected = CategoriesChoosen.Contains (DiningCategory.Categories [indexPath.Row]);
				cell.Accessory = selected ? UITableViewCellAccessory.Checkmark : UITableViewCellAccessory.None;

				return cell;

			} else {
				return base.GetCell (tableView, indexPath);
			}
		}

		public override float GetHeightForRow (UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section == 0 || indexPath.Section == 1) {
				return base.GetHeightForRow (tableView, indexPath);
			} else if (indexPath.Section == 2) {
				return 44;
			} else {
				return base.GetHeightForRow (tableView, indexPath);
			}
		}

		public override int IndentationLevel (UITableView tableView, NSIndexPath indexPath)
		{
			if (indexPath.Section == 0 || indexPath.Section == 1) {
				return base.IndentationLevel (tableView, indexPath);
			} else if (indexPath.Section == 2) {
				return 1;
			} else {
				return base.IndentationLevel (tableView, indexPath);
			}
		}

		public override bool ShouldHighlightRow (UITableView tableView, NSIndexPath rowIndexPath)
		{
			if (rowIndexPath.Section == 2) {
				return true;
			} else {
				return false;
			}
		}

		public override  void RowSelected (UITableView tableView, NSIndexPath indexPath)
		{
			var cell = tableView.CellAt (indexPath);
			tableView.DeselectRow (indexPath, false);

			if (indexPath.Section != 2) {
				return;
			}

			DiningCategory cat = DiningCategory.Categories [indexPath.Row];

			if (CategoriesChoosen.Contains (cat)) {
				CategoriesChoosen.Remove (DiningCategory.Categories [indexPath.Row]);
				cell.Accessory = UITableViewCellAccessory.None;
			} else {
				CategoriesChoosen.Add (DiningCategory.Categories [indexPath.Row]);
				cell.Accessory = UITableViewCellAccessory.Checkmark;
			}

			CountLabel.Text = CategoriesChoosen.Count.ToString ();
		}



	}
}
